# frozen_string_literal: true

# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#

require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'support', 'paths'))
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'support', 'selectors'))
require 'cucumber/rspec/doubles'

module WithinHelpers
  def with_scope(locator, &block)
    locator ? within(*selector_for(locator), &block) : yield
  end
end
World(WithinHelpers)

# Single-line step scoper
When(/^(.*) within ([^:]+)$/) do |step, parent|
  with_scope(parent) { step(step) }
end

# Multi-line step scoper
When(/^(.*) within ([^:]+):$/) do |step, parent, table_or_string|
  with_scope(parent) { step("#{step}:", table_or_string) }
end

Given(/^(?:|I )am on (.+)$/) do |page_name|
  visit path_to(page_name)
end

When(/^(?:|I )go to (.+)$/) do |page_name|
  visit path_to(page_name)
end

When(/^(?:|I )press "([^"]*)"$/) do |button|
  click_button(button)
end

When(/^(?:|I )follow "([^"]*)"$/) do |link|
  click_link(link)
end

When(/^(?:|I )fill in "([^"]*)" with "([^"]*)"$/) do |field, value|
  fill_in(field, with: value)
  find_field(field).send_keys :enter unless Capybara.current_driver == :rack_test
end

When(/^(?:|I )fill in "([^"]*)" with "([^"]*)" if not empty$/) do |field, value|
  unless value.squish.empty?
    fill_in(field, with: value)
    find_field(field).send_keys :enter unless Capybara.current_driver == :rack_test
  end
end

When(/^(?:|I )fill in "([^"]*)" with "([^"]*)" if "([^"]*)" not empty$/) do |field, value, entry|
  unless entry.squish.empty?
    fill_in(field, with: value)
    find_field(field).send_keys :enter unless Capybara.current_driver == :rack_test
  end
end

When(/^(?:|I )fill in "([^"]*)" for "([^"]*)"$/) do |value, field|
  fill_in(field, with: value)
  find_field(field).send_keys :enter unless Capybara.current_driver == :rack_test
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
When(/^(?:|I )fill in the following:$/) do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When(/^(?:|I )select "([^"]*)" from "([^"]*)"$/) do |value, field|
  select(value, from: field)
end

When(/^(?:|I )check "([^"]*)"$/) do |field|
  check(field)
end

When(/^(?:|I )uncheck "([^"]*)"$/) do |field|
  uncheck(field)
end

When(/^(?:|I )choose "([^"]*)"$/) do |field|
  choose(field)
end

When(/^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/) do |path, field|
  attach_file(field, File.expand_path(path))
end

When(/^(?:|I )wait for all AJAX calls$/) do
  wait_for_ajax
end

When(/^(?:|I )click on the page$/) do
  # necessary to fire the JavaScript that renders extra fields
  page.find('body').click
end

Then(/^(?:|I )should see "([^"]*)"$/) do |text|
  expect(page).to have_content(text)
end

Then(/^(?:|I )should see \/([^\/]*)\/$/) do |regexp|
  regexp = Regexp.new(regexp)
  expect(page).to have_xpath('//*', text: regexp)
end

Then(/^(?:|I )should not see "([^"]*)"$/) do |text|
  expect(page).not_to have_content(text)
end

Then(/^(?:|I )should display "([^"]*)"$/) do |identif|
  expect(page).to have_xpath("//*[@id='#{identif}']")
end

Then(/^(?:|I )should not display "([^"]*)"$/) do |identif|
  expect(page).not_to have_xpath("//*[@id='#{identif}']")
end

Then(/^(?:|I )should not see \/([^\/]*)\/$/) do |regexp|
  regexp = Regexp.new(regexp)
  expect(page).not_to have_xpath('//*', text: regexp)
end

Then(/^the "([^"]*)" field(?: within (.*))? should contain "([^"]*)"$/) do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    expect(field_value).to match(/#{value}/)
  end
end

Then(/^the "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"$/) do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    expect(field_value).not_to match(/#{value}/)
  end
end

Then(/^the "([^"]*)" checkbox(?: within (.*))? should be checked$/) do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    expect(field_checked).to be_truthy
  end
end

Then(/^the "([^"]*)" checkbox(?: within (.*))? should not be checked$/) do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    expect(field_checked).to be_falsey
  end
end

Then(/^(?:|I )should be on (.+)$/) do |page_name|
  current_path = URI.parse(current_url).path
  expect(current_path).to eq(path_to(page_name))
end

Then(/^(?:|I )should have the following query string:$/) do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair { |k, v| expected_params[k] = v.split(',') }
  expect(actual_params).to eq(expected_params)
end

Then(/^show me the page$/) do
  save_and_open_page
end
