%h2 Activity Logging
%div{:id => "info_box"}
= form_for :process_plate, :url => process_plates_path do |form|
 %fieldset
  %ul
   %li
    %label{ :for => "user_barcode" } User barcode
    = text_field_tag "user_barcode"
    .live_results#user_barcode_results

   %li
    %label{ :for => "instrument_barcode" } Instrument barcode
    = text_field_tag "instrument_barcode"
    .live_results#instrument_barcode_results


   %li
    %label{ :for => "instrument_process" } Instrument process
    %select#instrument_process{ :name => "instrument_process"}
     - for process_name, process_id in InstrumentProcess.sorted_by_name.map { |x| [x.name, x.id]}
      %option{ :value => process_id } #{process_name}

   %li
    #source_plates_results

   %li.hidden#visual_check_input
    %label{ :for => "visual_check"} Visual check performed
    = check_box_tag "visual_check"

   %li.hidden#witness_barcode_input
    %label{ :for => "witness_barcode"} Witness barcode
    = text_field_tag "witness_barcode"

   %li
    %input{ :type => "submit", :value => 'Submit' }

- content_for :page_javascript do
 :javascript

    (function($) {

      var ModuleNextInputBehaviour = {
        setNextInput: function(next) {
          this._next = next;
        },
        nextInput: function(e) {
          var keyCode = e.keyCode || e.which;
          if (keyCode == 13) {
            if (typeof this._next !== "undefined") {
              this._next.focus();
            }
            this._dom.trigger('change');
            return false;
          }
        }
      }

      function User() {
        this._dom = $("#user_barcode");
        this._dom.focus();
        this._dom.trigger('change');
        this._barcodeResults = $("#user_barcode_results");

        this.attachEvents();
      }
      User.prototype = $.extend({
        findUsers: function() {
          $.post('#{search_users_path}',{ user_barcode: this._dom.val()}, $.proxy(function(data) {
            this._barcodeResults.html(data);
          }, this));
        },
        attachEvents: function() {
          this._dom.change($.proxy(this.findUsers, this));
          this._dom.keydown($.proxy(this.nextInput, this));
        }
      }, ModuleNextInputBehaviour);

      function InstrumentProcess() {
        this._validationInput = $("#visual_validation_input");
        this._dom = $("#instrument_process")
        this._sourcePlatesResults = $("#source_plates_results");

        this.reset();
        this.attachEvents();
      };

      InstrumentProcess.prototype = {
        reset: function() {
          this._validationInput.attr("checked", false);
        },

        requiresVisualCheck: function() {
          return (#{@processes_requiring_visual_check.to_json}.indexOf(parseInt(this.getValue(),10))>=0)
        },

        setInstrumentBarcode: function(instrumentBarcode) {
          this._instrumentBarcode = instrumentBarcode;
        },

        getSourcePlatesResults: function() {
          return this._sourcePlatesResults;
        },

        updateVisualCheckVisibility: function() {
          if (this.requiresVisualCheck()) {
            $("#visual_check_input").removeClass("hidden");
          } else {
            $("#visual_check_input").addClass("hidden");
          }
        },

        predefinedInstrumentsHandler: function() {
          this.updateVisualCheckVisibility();
          this._instrumentBarcode.checkDisplayInstrumentBarcode();
          $.post('#{bed_layout_partial_bed_layouts_path}',{
          instrument_barcode: this._instrumentBarcode.getValue(),
          instrument_process_id: this._dom.val()
          }, $.proxy(function(data) {
            this.getSourcePlatesResults().html(data);
          }, this));
        },

        onFirstClickPredefinedInstrumentsHandler: function() {
          $("#instrument_process").unbind("click", this.onFirstClickPredefinedInstrumentsHandler);
          $("#instrument_process").change($.proxy(this.predefinedInstrumentsHandler, this));
          return this.predefinedInstrumentsHandler.apply(this, arguments);
        },

        checkIfShouldBeWitnessed: function() {
          $.post('#{witness_instruments_path}',{
          instrument_barcode: this._instrumentBarcode.getValue(),
          instrument_process_id: $('#instrument_process')[0].value }, function(data) {
            if (data.match(/witness_required/)) {
              $("#witness_barcode_input").removeClass('hidden');
            }
            else
            {
              $("#witness_barcode_input").removeClass('hidden').addClass('hidden');
            }
          });
        },
        attachEvents: function() {
          this.updateVisualCheckVisibility();
          this._dom.change($.proxy(this.checkIfShouldBeWitnessed, this));

          if ($("option", this._dom).length===1) {
            this._dom.click($.proxy(this.onFirstClickPredefinedInstrumentsHandler, this));
          } else {
            this._dom.change($.proxy(this.predefinedInstrumentsHandler, this));
          }
        },
        getValue: function() {
          return this._dom.val();
        }
      };

      var PREDEFINED_INSTRUMENT_BARCODES = #{get_predefined_instrument_barcodes.to_json}

      function InstrumentBarcode(instrumentProcess) {
        this._instrumentProcess = instrumentProcess;
        this._instrumentProcess.setInstrumentBarcode(this);

        this._dom = $("#instrument_barcode");
        this._witnessBarcodeInput = $("#witness_barcode_input");
        this._instrumentBarcodeResults = $("#instrument_barcode_results");

        this.attachEvents();
      }

      InstrumentBarcode.prototype = $.extend({

        prepareForSubmission: function() {
          var instrumentBarcodeInputJQ = $("#instrument_barcode");
          instrumentBarcodeInputJQ.attr("id", "instrument_barcode-visible");
          instrumentBarcodeInputJQ.attr("name", "instrument_barcode-visible");
          var hiddenInput = "<input type='hidden' name='instrument_barcode' id='instrument_barcode' value='"+this.getValue()+"'></input>";
          $("form").append(hiddenInput);
          this._dom.val(this.getValue());
          //$("#instrument_barcode")[0].value=this.getValue();
        },
        getPredefinedInstrumentBarcodeFromInput: function () {
          return PREDEFINED_INSTRUMENT_BARCODES[this._instrumentProcess.getValue()];
        },
        checkDisplayInstrumentBarcode: function () {
          var nodeToDisplay = this._dom.parent();
          nodeToDisplay[(typeof this.getPredefinedInstrumentBarcodeFromInput() === 'undefined') ? 'show' : 'hide']();
        },
        /**
        * Handle changes on behaviour while changing the instrument process (e.g. Destroy labware doesn't require the
        * user to supply an instrument barcode
        **/
        getValue: function() {
          if (this._dom.val().length > 0) {
            return this._dom.val();
          }
          var predefInstrumentBarcode = this.getPredefinedInstrumentBarcodeFromInput();
          return (typeof predefInstrumentBarcode !== "undefined") ? predefInstrumentBarcode : this._dom.val();
        },

        loadInstrumentProcess: function() {
          $.post('#{search_instruments_path}',{ instrument_barcode: this.getValue()}, $.proxy(function(data) {
            this._instrumentBarcodeResults.html(data);
          }, this));

          $.post('#{processes_instruments_path}',{ instrument_barcode: this.getValue()}, $.proxy(function(data) {

            this._instrumentProcess._dom.html(data);

            $.post('#{witness_instruments_path}',{ instrument_barcode: this.getValue(), instrument_process_id: this._instrumentProcess.getValue() }, $.proxy(function(data) {
              if (data.match(/witness_required/)) {
                this._witnessBarcodeInput.removeClass('hidden');
              }
            }, this));

            $.post('#{bed_layout_partial_bed_layouts_path}',{ instrument_barcode: this.getValue(), instrument_process_id: this._instrumentProcess.getValue() }, $.proxy(function(data) {
              this._instrumentProcess.getSourcePlatesResults().html(data);
            }, this));
            this._instrumentProcess.updateVisualCheckVisibility();
          }, this));
        },
        attachEvents: function() {
          this._dom.keydown($.proxy(this.nextInput, this));
          this._dom.change($.proxy(this.loadInstrumentProcess, this));
        }
      }, ModuleNextInputBehaviour);

      function AuditEvent() {
        this._form = $("form");
        this._user = new User();
        this._instrumentProcess = new InstrumentProcess();
        this._instrumentBarcode = new InstrumentBarcode(this._instrumentProcess);

        this._user.setNextInput(this._instrumentBarcode._dom);
        this._instrumentBarcode.setNextInput(this._instrumentProcess.getSourcePlatesResults());

        this.attachEvents();
      }

      AuditEvent.prototype = {
        attachEvents: function() {
          $("form").bind("submit", $.proxy(function(e) {
            this._instrumentBarcode.prepareForSubmission();
          }, this));

        }
      }


      new AuditEvent();
    })(jQuery);




